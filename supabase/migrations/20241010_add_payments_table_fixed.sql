-- Create payments table for KPay integration
CREATE TABLE IF NOT EXISTS public.payments (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  order_id UUID NOT NULL REFERENCES public.orders(id) ON DELETE CASCADE,
  amount DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'RWF' NOT NULL,
  payment_method VARCHAR(50) NOT NULL,
  status VARCHAR(20) DEFAULT 'pending' NOT NULL CHECK (status IN ('pending', 'completed', 'failed', 'cancelled')),
  reference VARCHAR(100) UNIQUE NOT NULL,
  
  -- Customer information
  customer_name VARCHAR(255) NOT NULL,
  customer_email VARCHAR(255) NOT NULL,
  customer_phone VARCHAR(20) NOT NULL,
  
  -- KPay specific fields
  kpay_transaction_id VARCHAR(100),
  kpay_auth_key VARCHAR(100),
  kpay_return_code INTEGER,
  kpay_response JSONB,
  kpay_webhook_data JSONB,
  kpay_mom_transaction_id VARCHAR(100),
  kpay_pay_account VARCHAR(50),
  
  -- Timestamps
  created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
  completed_at TIMESTAMPTZ,
  
  -- Failure information
  failure_reason TEXT,
  
  -- Indexes for performance
  CONSTRAINT payments_order_id_key UNIQUE(order_id)
);

-- Create indexes for better query performance
CREATE INDEX IF NOT EXISTS idx_payments_order_id ON public.payments(order_id);
CREATE INDEX IF NOT EXISTS idx_payments_status ON public.payments(status);
CREATE INDEX IF NOT EXISTS idx_payments_kpay_transaction_id ON public.payments(kpay_transaction_id);
CREATE INDEX IF NOT EXISTS idx_payments_reference ON public.payments(reference);
CREATE INDEX IF NOT EXISTS idx_payments_created_at ON public.payments(created_at);

-- Add payment_status column to orders table if it doesn't exist
DO $$ 
BEGIN 
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='orders' AND column_name='payment_status') THEN
        ALTER TABLE public.orders ADD COLUMN payment_status VARCHAR(20) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'paid', 'failed', 'refunded'));
    END IF;
END $$;

-- Add payment_method column to orders table if it doesn't exist
DO $$ 
BEGIN 
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='orders' AND column_name='payment_method') THEN
        ALTER TABLE public.orders ADD COLUMN payment_method VARCHAR(50) DEFAULT 'cash_on_delivery';
    END IF;
END $$;

-- Create updated_at trigger for payments table
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply the trigger to the payments table
DROP TRIGGER IF EXISTS update_payments_updated_at ON public.payments;
CREATE TRIGGER update_payments_updated_at
    BEFORE UPDATE ON public.payments
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS (Row Level Security) for payments table
ALTER TABLE public.payments ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for payments table
-- Users can only see their own payments
CREATE POLICY "Users can view own payments" ON public.payments
    FOR SELECT USING (
        customer_email = auth.jwt() ->> 'email' 
        OR 
        EXISTS (
            SELECT 1 FROM public.orders 
            WHERE orders.id = payments.order_id 
            AND orders.customer_email = auth.jwt() ->> 'email'
        )
    );

-- Allow authenticated users to insert their own payments (needed for order creation)
CREATE POLICY "Users can insert own payments" ON public.payments
    FOR INSERT WITH CHECK (
        customer_email = auth.jwt() ->> 'email'
    );

-- Service role can do everything (for API operations)
CREATE POLICY "Service role can manage payments" ON public.payments
    FOR ALL USING (auth.jwt() ->> 'role' = 'service_role');

-- Grant necessary permissions
GRANT ALL ON public.payments TO service_role;
GRANT SELECT, INSERT ON public.payments TO authenticated;
GRANT SELECT ON public.payments TO anon;

-- Add helpful comments
COMMENT ON TABLE public.payments IS 'Payment records for orders, integrated with KPay payment gateway';
COMMENT ON COLUMN public.payments.reference IS 'Unique payment reference generated by our system';
COMMENT ON COLUMN public.payments.kpay_transaction_id IS 'Transaction ID from KPay system';
COMMENT ON COLUMN public.payments.kpay_response IS 'Full response from KPay API when payment was initiated';
COMMENT ON COLUMN public.payments.kpay_webhook_data IS 'Data received from KPay webhook notifications';