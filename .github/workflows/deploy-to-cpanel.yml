name: CI/CD — Build and deploy to cPanel

on:
  push:
    branches: [main]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CPANEL_FTP_HOST: ${{ secrets.CPANEL_FTP_HOST }}
      CPANEL_FTP_USERNAME: ${{ secrets.CPANEL_FTP_USERNAME }}
      CPANEL_FTP_PASSWORD: ${{ secrets.CPANEL_FTP_PASSWORD }}
      CPANEL_FTP_PATH: ${{ secrets.CPANEL_FTP_PATH }}
      CPANEL_SSH_HOST: ${{ secrets.CPANEL_SSH_HOST }}
      CPANEL_SSH_PORT: ${{ secrets.CPANEL_SSH_PORT }}
      CPANEL_SSH_USER: ${{ secrets.CPANEL_SSH_USER }}
      CPANEL_SSH_PRIVATE_KEY: ${{ secrets.CPANEL_SSH_PRIVATE_KEY }}
      CPANEL_DEPLOY_PATH: ${{ secrets.CPANEL_DEPLOY_PATH }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies (npm)
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-fund --no-audit
          else
            npm install --no-fund --no-audit
          fi

      - name: Check Supabase secrets
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          if [ -z "${NEXT_PUBLIC_SUPABASE_URL}" ] || [ -z "${NEXT_PUBLIC_SUPABASE_ANON_KEY}" ]; then
            echo "ERROR: Missing Supabase secrets. Make sure NEXT_PUBLIC_SUPABASE_URL and NEXT_PUBLIC_SUPABASE_ANON_KEY are set in Actions repository secrets."
            echo "NEXT_PUBLIC_SUPABASE_URL present: ${NEXT_PUBLIC_SUPABASE_URL:+yes}"
            echo "NEXT_PUBLIC_SUPABASE_ANON_KEY present: ${NEXT_PUBLIC_SUPABASE_ANON_KEY:+yes}"
            exit 1
          else
            echo "Supabase secrets present. Proceeding to build."
          fi

      - name: Create .env.production from secrets
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        run: |
          echo "Creating .env.production with Supabase values (values will not be printed)"
          printf "%s\n" "NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}" > .env.production
          printf "%s\n" "NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}" >> .env.production

      - name: Build
        env:
          NODE_ENV: production
        run: npm run build --if-present

      - name: Prepare export (static) if needed
        run: |
          # Exporting as static if the project supports next export
          if [ "${NEXT_EXPORT}" = "true" ]; then
            echo "NEXT_EXPORT=true — running next export"
            npx next export -o out || true
          else
            echo "NEXT_EXPORT not true — skipping next export"
          fi

      - name: Prepare deploy directory (dist or out)
        id: prepare
        run: |
          set -e
          DEPLOY_DIR=""
          if [ -d out ]; then 
            DEPLOY_DIR=out
          else
            echo "Creating dist folder for Node deployment"
            rm -rf dist || true
            mkdir -p dist
            # copy build artifact and public assets
            cp -r .next dist/ || true
            cp -r public dist/ || true
            # include server file and package.json so cPanel can run npm install
            cp package.json dist/ || true
            if [ -f server.js ]; then cp server.js dist/; fi
            # copy next.config.js if present
            if [ -f next.config.js ]; then cp next.config.js dist/; fi
            DEPLOY_DIR=dist
          fi
          echo "deploy_dir=${DEPLOY_DIR}" >> $GITHUB_OUTPUT

      - name: Show deploy dir contents
        run: |
          echo "Deploying from: ${{ steps.prepare.outputs.deploy_dir }}"
          ls -la "${{ steps.prepare.outputs.deploy_dir }}" || true

      - name: Write SSH deploy key (if provided)
        run: |
          set -euo pipefail
          echo "Writing deploy key to ~/.ssh/deploy_key (if provided)"
          if [ -z "${CPANEL_SSH_PRIVATE_KEY:-}" ]; then
            echo "No CPANEL_SSH_PRIVATE_KEY secret found — skipping key write"
            exit 0
          fi
          mkdir -p ~/.ssh
          # write private key to a file (do not print the key)
          printf '%s\n' "$CPANEL_SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          # normalize line endings (in case the secret had CRLF)
          sed -i 's/\r$//' ~/.ssh/deploy_key || true
          chmod 600 ~/.ssh/deploy_key
          # show the key fingerprint for debugging (safe, doesn't print the private key)
          if command -v ssh-keygen >/dev/null 2>&1; then
            ssh-keygen -lf ~/.ssh/deploy_key || true
            # Also derive and print the public key (safe) so you can compare to server's authorized_keys
            if ssh-keygen -y -f ~/.ssh/deploy_key > ~/.ssh/deploy_key.pub 2>/dev/null; then
              echo "Derived public key (will be printed for comparison):"
              cat ~/.ssh/deploy_key.pub || true
              echo "Derived public key fingerprint:"
              ssh-keygen -lf ~/.ssh/deploy_key.pub || true
            else
              echo "Could not derive public key from deploy_key (private key format unsupported)" || true
            fi
          fi

      - name: Deploy (SSH archive preferred, FTP fallback)
        env:
          # SSH secrets (optional)
          CPANEL_SSH_HOST: ${{ secrets.CPANEL_SSH_HOST }}
          CPANEL_SSH_PORT: ${{ secrets.CPANEL_SSH_PORT }}
          CPANEL_SSH_USER: ${{ secrets.CPANEL_SSH_USER }}
          CPANEL_DEPLOY_PATH: ${{ secrets.CPANEL_DEPLOY_PATH }}
          SSH_KEY: ${{ secrets.CPANEL_SSH_PRIVATE_KEY }}
          # FTP secrets (fallback)
          CPANEL_FTP_HOST: ${{ secrets.CPANEL_FTP_HOST }}
          CPANEL_FTP_USERNAME: ${{ secrets.CPANEL_FTP_USERNAME }}
          CPANEL_FTP_PASSWORD: ${{ secrets.CPANEL_FTP_PASSWORD }}
          CPANEL_FTP_PATH: ${{ secrets.CPANEL_FTP_PATH }}
        run: |
          set -euo pipefail
          LDIR="./${{ steps.prepare.outputs.deploy_dir }}"
          echo "Local deploy directory size and file count:"
          du -sh "${LDIR}" || true
          find "${LDIR}" -type f | wc -l || true

          if [ -n "${CPANEL_SSH_HOST:-}" ] && [ -n "${CPANEL_SSH_USER:-}" ]; then
            echo "Deploying via SFTP mirror to ${CPANEL_SSH_USER}@${CPANEL_SSH_HOST}:${CPANEL_DEPLOY_PATH} (non-destructive, no delete)"
            # Create restart trigger inside the local deploy directory so Passenger will restart the app after files update
            mkdir -p "${LDIR}/tmp"
            echo "Deployed at "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"" > "${LDIR}/tmp/restart.txt" || true

            echo "Using lftp SFTP mirror (will mirror ${LDIR} -> ${CPANEL_DEPLOY_PATH})"
            sudo apt-get update -qq
            sudo apt-get install -y --no-install-recommends lftp
            # lftp will use the SSH key for sftp by instructing ssh to use it via sftp:connect-program
            SFTP_CONNECT_PROG="ssh -a -x -i ~/.ssh/deploy_key -o IdentitiesOnly=yes -p ${CPANEL_SSH_PORT}"
            REMOTE_DIR="${CPANEL_DEPLOY_PATH}"
            LFTP_CMD="set sftp:connect-program '${SFTP_CONNECT_PROG}'; set net:max-retries 5; set net:reconnect-interval-base 5; set net:timeout 20; set ftp:passive-mode true; mirror -R --only-newer --parallel=10 --verbose '${LDIR}' '${REMOTE_DIR}'"
            echo "Running lftp with command: ${LFTP_CMD}"
            # run lftp in non-interactive mode using sftp
            lftp -u "${CPANEL_SSH_USER}", -e "${LFTP_CMD}; bye" sftp://${CPANEL_SSH_HOST}
            # clean up the key on disk
            rm -f ~/.ssh/deploy_key || true
            echo "SSH deploy finished (existing files/folders not overwritten unless present in archive)"
          elif [ -n "${CPANEL_FTP_HOST:-}" ] && [ -n "${CPANEL_FTP_USERNAME:-}" ] && [ -n "${CPANEL_FTP_PASSWORD:-}" ]; then
            echo "No SSH credentials found — falling back to FTP deploy to ${CPANEL_FTP_HOST}:${CPANEL_FTP_PATH}"
            sudo apt-get update -qq
            sudo apt-get install -y --no-install-recommends lftp
            REMOTE_DIR="${CPANEL_FTP_PATH}"
            LFTP_CMD="set net:max-retries 5; set net:reconnect-interval-base 5; set net:timeout 20; set ftp:passive-mode true; \
              mirror -R --only-newer --parallel=10 --use-pget-n=10 --delete --verbose '${LDIR}' '${REMOTE_DIR}'"
            echo "Running lftp with command: ${LFTP_CMD}"
            lftp -u "${CPANEL_FTP_USERNAME}","${CPANEL_FTP_PASSWORD}" "${CPANEL_FTP_HOST}" -e "${LFTP_CMD}; bye"
          else
            echo "ERROR: No deploy credentials supplied. Set SSH secrets (CPANEL_SSH_HOST, CPANEL_SSH_PRIVATE_KEY, CPANEL_SSH_USER) or FTP secrets (CPANEL_FTP_HOST, CPANEL_FTP_USERNAME, CPANEL_FTP_PASSWORD)."
            exit 1
          fi
